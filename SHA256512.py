class HEXANDBINARY():
    def __init__(self):
        self.hexANDbinary =[['0000', '0'],
                            ['0001', '1'],
                            ['0010', '2'],
                            ['0011', '3'],
                            ['0100', '4'],
                            ['0101', '5'],
                            ['0110', '6'],
                            ['0111', '7'],
                            ['1000', '8'],
                            ['1001', '9'],
                            ['1010', 'a'],
                            ['1011', 'b'],
                            ['1100', 'c'],
                            ['1101', 'd'],
                            ['1110', 'e'],
                            ['1111', 'f']]

        self.b2h = {self.hexANDbinary[i][0]:self.hexANDbinary[i][1] for i in range(len(self.hexANDbinary))}
        
        self.h2b = {self.hexANDbinary[i][1]:self.hexANDbinary[i][0] for i in range(len(self.hexANDbinary))} 

    def hex2binary(self, b):
        return ''.join(self.h2b[c] for c in b)

    def binary2hex(self, b):
        parts_4 = [b[x:x+4] for x in range(0, len(b), 4)]
        return ''.join(self.b2h[elem] for elem in parts_4)


class SHA_256(HEXANDBINARY):
    def __init__(self):
        super().__init__()
        self.K=['01000010100010100010111110011000',
                '01110001001101110100010010010001',
                '10110101110000001111101111001111',
                '11101001101101011101101110100101',
                '00111001010101101100001001011011',
                '01011001111100010001000111110001',
                '10010010001111111000001010100100',
                '10101011000111000101111011010101',
                '11011000000001111010101010011000',
                '00010010100000110101101100000001',
                '00100100001100011000010110111110',
                '01010101000011000111110111000011',
                '01110010101111100101110101110100',
                '10000000110111101011000111111110',
                '10011011110111000000011010100111',
                '11000001100110111111000101110100',
                '11100100100110110110100111000001',
                '11101111101111100100011110000110',
                '00001111110000011001110111000110',
                '00100100000011001010000111001100',
                '00101101111010010010110001101111',
                '01001010011101001000010010101010',
                '01011100101100001010100111011100',
                '01110110111110011000100011011010',
                '10011000001111100101000101010010',
                '10101000001100011100011001101101',
                '10110000000000110010011111001000',
                '10111111010110010111111111000111',
                '11000110111000000000101111110011',
                '11010101101001111001000101000111',
                '00000110110010100110001101010001',
                '00010100001010010010100101100111',
                '00100111101101110000101010000101',
                '00101110000110110010000100111000',
                '01001101001011000110110111111100',
                '01010011001110000000110100010011',
                '01100101000010100111001101010100',
                '01110110011010100000101010111011',
                '10000001110000101100100100101110',
                '10010010011100100010110010000101',
                '10100010101111111110100010100001',
                '10101000000110100110011001001011',
                '11000010010010111000101101110000',
                '11000111011011000101000110100011',
                '11010001100100101110100000011001',
                '11010110100110010000011000100100',
                '11110100000011100011010110000101',
                '00010000011010101010000001110000',
                '00011001101001001100000100010110',
                '00011110001101110110110000001000',
                '00100111010010000111011101001100',
                '00110100101100001011110010110101',
                '00111001000111000000110010110011',
                '01001110110110001010101001001010',
                '01011011100111001100101001001111',
                '01101000001011100110111111110011',
                '01110100100011111000001011101110',
                '01111000101001010110001101101111',
                '10000100110010000111100000010100',
                '10001100110001110000001000001000',
                '10010000101111101111111111111010',
                '10100100010100000110110011101011',
                '10111110111110011010001111110111',
                '11000110011100010111100011110010']

        self.H=['01101010000010011110011001100111',
                '10111011011001111010111010000101',
                '00111100011011101111001101110010',
                '10100101010011111111010100111010',
                '01010001000011100101001001111111',
                '10011011000001010110100010001100',
                '00011111100000111101100110101011',
                '01011011111000001100110100011001']

        


    def shr(self, x, d):
        '''
        логический сдвиг (>) ВПРАВО на d
        '''
        result = ''
        for i in range(d):
            result += '0'
            t = 0
        for i in range(d,len(x)):
            result += x[t]
            t+=1
        return result
    
    def binary_addition(self, a, b):
        result = []
        carry = 0
        for i in range(max(len(a), len(b))):
            vala = a[len(a) - 1 - i] if i < len(a) else 0
            valb = b[len(b) - 1 - i] if i < len(b) else 0
            reaminder = (int(vala) + int(valb) + carry) % 2
            carry = (int(vala) + int(valb) + carry) // 2
            result.append(str(reaminder))

        if carry != 0:
            result.append(str(carry))
        return ''.join(reversed(result))

    def binary_addition_mod(self, a, b, n):
        t1 = self.binary_addition(a, b)
        return t1[len(t1) - n: ]

    def str_and(self, x, y):
        if len(x) != len(y):
            raise ValueError

        result = ''
        for i in range(len(x)):
            t1 = int(x[i])
            t2 = int(y[i])
            result += str(t1&t2)
        return result

    def str_no(self, x):
        result = ''
        for i in x:
            if i == '1':
                result += '0'
                continue
            result += '1'
        return result
    
    def xor(self, x, y):
        if len(x) != len(y):
            raise ValueError
        
        result = ''
        for i in range(len(x)):
            t1 = int(x[i])
            t2 = int(y[i])
            result += str((t1 + t2) % 2)
        return result


    def rotr(self, x, d):
        '''
        циклический сдвиг ВПРАВО! на d
        '''
        d1 = abs(d) % len(x)
        return x[-d:] + x[:-d]
    
    def CH(self, x, y, z):
        t1 = self.str_and(x, y)
        t2 = self.str_no(x)
        t3 = self.str_and(t2, z)
        t4 = self.xor(t1, t3)
        return t4
    
    def Maj(self, x, y, z):
        t1 = self.str_and(x, y)
        t2 = self.str_and(x, z)
        t3 = self.str_and(y, z)
        t4 = self.xor(t1, t2)
        t5 = self.xor(t3, t4)
        return t5
    
    def SIGMA0(self, x):
        t1 = self.rotr(x, 2)
        t2 = self.rotr(x, 13)
        t3 = self.rotr(x, 22)
        t4 = self.xor(t1, t2)
        t5 = self.xor(t3, t4)
        return t5
    
    def SIGMA1(self, x):
        t1 = self.rotr(x, 6)
        t2 = self.rotr(x, 11)
        t3 = self.rotr(x, 25)
        t4 = self.xor(t1, t2)
        t5 = self.xor(t3, t4)
        return t5
    
    def sigma0(self, x):
        t1 = self.rotr(x, 7)
        t2 = self.rotr(x, 18)
        t3 = self.shr(x, 3)
        t4 = self.xor(t1, t2)
        t5 = self.xor(t3, t4)
        return t5
    
    def sigma1(self, x):
        t1 = self.rotr(x, 17)
        t2 = self.rotr(x, 19)
        t3 = self.shr(x, 10)
        t4 = self.xor(t1, t2)
        t5 = self.xor(t3, t4)
        return t5


    def HASHVALUE256(self, message):
        '''
        сообщение подается в виде строки, не в битах
        на выходе уже шеснадцатиричный хеш
        '''
        mb = ''.join(format(ord(c),'08b') for c in message)
        k = (448 - len(mb) - 1) % 512
        kb = '0'*k
        len_dvoich = format(len(mb), '064b')
        dmb = mb + '1' + kb + len_dvoich

        fivetwelveblocks = [dmb[x:x+512] for x in range (0, len(dmb), 512)]
        for block in fivetwelveblocks:
                
            M_t = [block[x:x+32] for x in range (0, len(block), 32)]

            w = [0]*64
            for i in range(16):
                w[i] = M_t[i]


            for i in range(16,64):
                a1 = w[i-15]

                s0 = self.sigma0(a1)

                a1 = w[i-2]
                
                s1 = self.sigma1(a1)

                a1 = w[i-16]
                a2 = w[i-7]
                t1 = self.binary_addition_mod(a1, s0, 32)
                t2 = self.binary_addition_mod(a2, s1, 32)
                t3 = self.binary_addition_mod(t1, t2, 32)
                w[i] = t3

            # print(w[-1]) # тут все ок

            a,b,c,d,e,f,g,h = self.H

            for i in range(64):
                S0 = self.SIGMA0(a)

                Ma = self.Maj(a, b, c)

                t2 = self.binary_addition_mod(S0, Ma, 32)

                S1 = self.SIGMA1(e)

                Ch = self.CH(e, f, g)

                k1 = self.binary_addition_mod(h, S1, 32)
                k2 = self.binary_addition_mod(Ch, self.K[i], 32)
                k3 = self.binary_addition_mod(k1, k2, 32)
                k4 = self.binary_addition_mod(k3, w[i], 32)

                t1 = k4

                h = g
                g = f
                f = e
                e = self.binary_addition_mod(d, t1, 32)
                d = c
                c = b
                b = a 
                a = self.binary_addition_mod(t1, t2, 32)

            self.H[0] = self.binary_addition_mod(self.H[0], a, 32)
            self.H[1] = self.binary_addition_mod(self.H[1], b, 32)
            self.H[2] = self.binary_addition_mod(self.H[2], c, 32)
            self.H[3] = self.binary_addition_mod(self.H[3], d, 32)
            self.H[4] = self.binary_addition_mod(self.H[4], e, 32)
            self.H[5] = self.binary_addition_mod(self.H[5], f, 32)
            self.H[6] = self.binary_addition_mod(self.H[6], g, 32)
            self.H[7] = self.binary_addition_mod(self.H[7], h, 32)


        mHASH = self.H[0] + self.H[1] + self.H[2] + self.H[3] + self.H[4] + self.H[5] + self.H[6] + self.H[7]
        return self.binary2hex(mHASH)

class SHA_512(HEXANDBINARY):
    def __init__(self):
        super().__init__()

        self.H=['0110101000001001111001100110011111110011101111001100100100001000', 
                '1011101101100111101011101000010110000100110010101010011100111011', 
                '0011110001101110111100110111001011111110100101001111100000101011', 
                '1010010101001111111101010011101001011111000111010011011011110001', 
                '0101000100001110010100100111111110101101111001101000001011010001', 
                '1001101100000101011010001000110000101011001111100110110000011111', 
                '0001111110000011110110011010101111111011010000011011110101101011', 
                '0101101111100000110011010001100100010011011111100010000101111001']

        
        self.K=['0100001010001010001011111001100011010111001010001010111000100010', 
                '0111000100110111010001001001000100100011111011110110010111001101', 
                '1011010111000000111110111100111111101100010011010011101100101111', 
                '1110100110110101110110111010010110000001100010011101101110111100', 
                '0011100101010110110000100101101111110011010010001011010100111000', 
                '0101100111110001000100011111000110110110000001011101000000011001', 
                '1001001000111111100000101010010010101111000110010100111110011011', 
                '1010101100011100010111101101010111011010011011011000000100011000', 
                '1101100000000111101010101001100010100011000000110000001001000010', 
                '0001001010000011010110110000000101000101011100000110111110111110', 
                '0010010000110001100001011011111001001110111001001011001010001100', 
                '0101010100001100011111011100001111010101111111111011010011100010', 
                '0111001010111110010111010111010011110010011110111000100101101111', 
                '1000000011011110101100011111111000111011000101101001011010110001', 
                '1001101111011100000001101010011100100101110001110001001000110101', 
                '1100000110011011111100010111010011001111011010010010011010010100', 
                '1110010010011011011010011100000110011110111100010100101011010010', 
                '1110111110111110010001111000011000111000010011110010010111100011', 
                '0000111111000001100111011100011010001011100011001101010110110101', 
                '0010010000001100101000011100110001110111101011001001110001100101', 
                '0010110111101001001011000110111101011001001010110000001001110101', 
                '0100101001110100100001001010101001101110101001101110010010000011', 
                '0101110010110000101010011101110010111101010000011111101111010100', 
                '0111011011111001100010001101101010000011000100010101001110110101', 
                '1001100000111110010100010101001011101110011001101101111110101011', 
                '1010100000110001110001100110110100101101101101000011001000010000', 
                '1011000000000011001001111100100010011000111110110010000100111111', 
                '1011111101011001011111111100011110111110111011110000111011100100', 
                '1100011011100000000010111111001100111101101010001000111111000010', 
                '1101010110100111100100010100011110010011000010101010011100100101', 
                '0000011011001010011000110101000111100000000000111000001001101111', 
                '0001010000101001001010010110011100001010000011100110111001110000', 
                '0010011110110111000010101000010101000110110100100010111111111100', 
                '0010111000011011001000010011100001011100001001101100100100100110', 
                '0100110100101100011011011111110001011010110001000010101011101101', 
                '0101001100111000000011010001001110011101100101011011001111011111', 
                '0110010100001010011100110101010010001011101011110110001111011110', 
                '0111011001101010000010101011101100111100011101111011001010101000', 
                '1000000111000010110010010010111001000111111011011010111011100110', 
                '1001001001110010001011001000010100010100100000100011010100111011', 
                '1010001010111111111010001010000101001100111100010000001101100100', 
                '1010100000011010011001100100101110111100010000100011000000000001', 
                '1100001001001011100010110111000011010000111110001001011110010001', 
                '1100011101101100010100011010001100000110010101001011111000110000', 
                '1101000110010010111010000001100111010110111011110101001000011000', 
                '1101011010011001000001100010010001010101011001011010100100010000', 
                '1111010000001110001101011000010101010111011100010010000000101010', 
                '0001000001101010101000000111000000110010101110111101000110111000', 
                '0001100110100100110000010001011010111000110100101101000011001000', 
                '0001111000110111011011000000100001010001010000011010101101010011', 
                '0010011101001000011101110100110011011111100011101110101110011001', 
                '0011010010110000101111001011010111100001100110110100100010101000', 
                '0011100100011100000011001011001111000101110010010101101001100011', 
                '0100111011011000101010100100101011100011010000011000101011001011', 
                '0101101110011100110010100100111101110111011000111110001101110011', 
                '0110100000101110011011111111001111010110101100101011100010100011', 
                '0111010010001111100000101110111001011101111011111011001011111100', 
                '0111100010100101011000110110111101000011000101110010111101100000', 
                '1000010011001000011110000001010010100001111100001010101101110010', 
                '1000110011000111000000100000100000011010011001000011100111101100', 
                '1001000010111110111111111111101000100011011000110001111000101000', 
                '1010010001010000011011001110101111011110100000101011110111101001', 
                '1011111011111001101000111111011110110010110001100111100100010101', 
                '1100011001110001011110001111001011100011011100100101001100101011', 
                '1100101000100111001111101100111011101010001001100110000110011100', 
                '1101000110000110101110001100011100100001110000001100001000000111', 
                '1110101011011010011111011101011011001101111000001110101100011110', 
                '1111010101111101010011110111111111101110011011101101000101111000', 
                '0000011011110000011001111010101001110010000101110110111110111010', 
                '0000101001100011011111011100010110100010110010001001100010100110', 
                '0001000100111111100110000000010010111110111110010000110110101110', 
                '0001101101110001000010110011010100010011000111000100011100011011', 
                '0010100011011011011101111111010100100011000001000111110110000100', 
                '0011001011001010101010110111101101000000110001110010010010010011', 
                '0011110010011110101111100000101000010101110010011011111010111100', 
                '0100001100011101011001111100010010011100000100000000110101001100', 
                '0100110011000101110101001011111011001011001111100100001010110110', 
                '0101100101111111001010011001110011111100011001010111111000101010', 
                '0101111111001011011011111010101100111010110101101111101011101100', 
                '0110110001000100000110011000110001001010010001110101100000010111'] 

    def shr(self, x, d):
        '''
        логический сдвиг (>) ВПРАВО на d
        '''
        result = ''
        for i in range(d):
            result += '0'
            t = 0
        for i in range(d,len(x)):
            result += x[t]
            t+=1
        return result
    
    def binary_addition(self, a, b):
        result = []
        carry = 0
        for i in range(max(len(a), len(b))):
            vala = a[len(a) - 1 - i] if i < len(a) else 0
            valb = b[len(b) - 1 - i] if i < len(b) else 0
            reaminder = (int(vala) + int(valb) + carry) % 2
            carry = (int(vala) + int(valb) + carry) // 2
            result.append(str(reaminder))

        if carry != 0:
            result.append(str(carry))
        return ''.join(reversed(result))

    def binary_addition_mod(self, a, b, n):
        t1 = self.binary_addition(a, b)
        return t1[len(t1) - n: ]


    def str_and(self, x, y):
        if len(x) != len(y):
            raise ValueError
        
        
        result = ''
        for i in range(len(x)):
            t1 = int(x[i])
            t2 = int(y[i])
            result += str(t1&t2)
        return result

    def str_no(self, x):
        result = ''
        for i in x:
            if i == '1':
                result += '0'
                continue
            result += '1'
        return result
    
    def xor(self, x, y):
        if len(x) != len(y):
            raise ValueError
        
        result = ''
        for i in range(len(x)):
            t1 = int(x[i])
            t2 = int(y[i])
            result += str((t1 + t2) % 2)
        return result


    def rotr(self, x, d):
        '''
        циклический сдвиг ВПРАВО! на d
        '''
        d1 = abs(d) % len(x)
        return x[-d:] + x[:-d]
    
    def CH(self, x, y, z):
        t1 = self.str_and(x, y)
        t2 = self.str_no(x)
        t3 = self.str_and(t2, z)
        t4 = self.xor(t1, t3)
        return t4
    
    def Maj(self, x, y, z):
        t1 = self.str_and(x, y)
        t2 = self.str_and(x, z)
        t3 = self.str_and(y, z)
        t4 = self.xor(t1, t2)
        t5 = self.xor(t3, t4)
        return t5

    def SIGMA0(self, x):
        t1 = self.rotr(x, 28)
        t2 = self.rotr(x, 34)
        t3 = self.rotr(x, 39)
        t4 = self.xor(t1, t2)
        t5 = self.xor(t3, t4)
        return t5
    
    def SIGMA1(self, x):
        t1 = self.rotr(x, 14)
        t2 = self.rotr(x, 18)
        t3 = self.rotr(x, 41)
        t4 = self.xor(t1, t2)
        t5 = self.xor(t3, t4)
        return t5
    
    def sigma0(self, x):
        t1 = self.rotr(x, 1)
        t2 = self.rotr(x, 8)
        t3 = self.shr(x, 7)
        t4 = self.xor(t1, t2)
        t5 = self.xor(t3, t4)
        return t5
    
    def sigma1(self, x):
        t1 = self.rotr(x, 19)
        t2 = self.rotr(x, 61)
        t3 = self.shr(x, 6)
        t4 = self.xor(t1, t2)
        t5 = self.xor(t3, t4)
        return t5
    
    def HASHVALUE512(self, message):
        mb = ''.join(format(ord(c),'08b') for c in message)
        k = (896 - len(mb) - 1) % 1024
        kb = '0'*k
        len_dvoich = format(len(mb), '0128b')
        dmb = mb + '1' + kb + len_dvoich

        tentwentyfourblocks = [dmb[x:x+1024] for x in range (0, len(dmb), 1024)]
        for block in tentwentyfourblocks:

            M_t = [block[x:x+64] for x in range (0, len(block), 64)]

            w = [0]*80
            
            for i in range(16):
                w[i] = M_t[i]
            
            for i in range(16,80):
                a1 = w[i-15]

                s0 = self.sigma0(a1)

                a1 = w[i-2]
                
                s1 = self.sigma1(a1)

                a1 = w[i-16]
                a2 = w[i-7]
                t1 = self.binary_addition_mod(a1, s0, 64)
                t2 = self.binary_addition_mod(a2, s1, 64)
                t3 = self.binary_addition_mod(t1, t2, 64)
                w[i] = t3

            a,b,c,d,e,f,g,h = self.H

            for i in range(80):
                S0 = self.SIGMA0(a)

                Ma = self.Maj(a, b, c)

                t2 = self.binary_addition_mod(S0, Ma, 64)

                S1 = self.SIGMA1(e)

                Ch = self.CH(e, f, g)

                k1 = self.binary_addition_mod(h, S1, 64)
                k2 = self.binary_addition_mod(Ch, self.K[i], 64)
                k3 = self.binary_addition_mod(k1, k2, 64)
                k4 = self.binary_addition_mod(k3, w[i], 64)

                t1 = k4

                h = g
                g = f
                f = e
                e = self.binary_addition_mod(d, t1, 64)
                d = c
                c = b
                b = a 
                a = self.binary_addition_mod(t1, t2, 64)

            self.H[0] = self.binary_addition_mod(self.H[0], a, 64)
            self.H[1] = self.binary_addition_mod(self.H[1], b, 64)
            self.H[2] = self.binary_addition_mod(self.H[2], c, 64)
            self.H[3] = self.binary_addition_mod(self.H[3], d, 64)
            self.H[4] = self.binary_addition_mod(self.H[4], e, 64)
            self.H[5] = self.binary_addition_mod(self.H[5], f, 64)
            self.H[6] = self.binary_addition_mod(self.H[6], g, 64)
            self.H[7] = self.binary_addition_mod(self.H[7], h, 64)

        mHASH = self.H[0] + self.H[1] + self.H[2] + self.H[3] + self.H[4] + self.H[5] + self.H[6] + self.H[7]
        return self.binary2hex(mHASH)


if __name__ == "__main__":
    '''
    s = SHA_256()
    print(s.HASHVALUE256('h'))
    '''
    '''
    s = SHA_512()
    print(s.HASHVALUE512('h') == '2241bc8fc70705b42efead371fd4982c5ba69917e5b4b895810002644f0386da9c3131793458c2bf47608480d64a07278133c99912e0ba2daf23098f3520eb97')
    '''
    pass





